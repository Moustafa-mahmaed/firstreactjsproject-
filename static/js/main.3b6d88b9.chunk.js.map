{"version":3,"sources":["logo.svg","demo2.js","demo1.js","counter.js","datetime.js","toggle.js","input.js","cyclelife.js","DEMO3.js","App.js","home.js","error.js","try.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","demo2","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","react_default","a","createElement","title","Component","demo1","onClick","Counter","_this","increment","bind","assertThisInitialized","decrement","reset","state","count","setState","React","App","Home","react_router_dom","to","error","Try","match","params","id","Boolean","window","location","hostname","Routes","react_router","path","component","exact","Demo1","Demo2","Try1","Error1","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b6d88b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nclass demo2 extends Component {\n    constructor(props){\n        super(props)\n\n    }\n    render() {\n        console.log(this.props)\n        return (\n            <div>\n                demo2\n               <h2> {this.props.title}</h2>\n            </div>\n        );\n    }\n}\n\nexport default demo2;","import React, { Component } from 'react';\n\nclass demo1 extends Component {\n   call(){\n       console.log(\"f\");\n   }\n    render() {\n    \n        return (\n            <div>\n               <button onClick={this.call}>click</button>\n             \n            </div>\n        );\n    }\n}\n\nexport default demo1;","import React, { Component } from 'react';\n\nclass Counter extends Component {\n    constructor(props){\n        super(props);\n        console.log(props)\n        this.increment=this.increment.bind(this);\n        this.decrement=this.decrement.bind(this);\n        this.reset=this.reset.bind(this);\n\n        this.state={\n            count:0\n        }\n\n    }\n\n    increment(){\n        // console.log(\"increment\");\n        // this.setState(()=>{\n        //     return{\n\n        //         count:this.state.count+1\n        //     }\n        // })\n\n        this.setState({\n            count:this.state.count+1\n        })\n            \n     \n    }\n    decrement(){\n        console.log(\"decrement\");\n        this.setState({\n            count:this.state.count-1\n        })\n    }\n    reset(){\n        console.log(\"reset\");\n        this.setState({\n            count:0\n        })\n    }\n    render() {\n        // console.log(this.props.match.params);\n        return (\n            <div>\n                <h1>counter</h1>\n                <p>{this.state.count}</p>\n                <button onClick={this.increment}>increament</button>\n                <button  onClick={this.decrement}>decrement</button>\n\n                <button  onClick={this.reset}>reset</button>\n                  \n            </div>\n        );\n    }\n}\n\nexport default Counter;","import React, { Component } from 'react';\n\nclass datetime extends Component {\n    constructor(){\n        super();\n        this.timeupdate=this.timeupdate.bind(this);\n        this.timestart=this.timestart.bind(this);\n        this.state={\n            time:new Date().toLocaleString()\n        }\n        \n    }\n    timestart(){\n\n        setInterval(this.timeupdate, 1000);\n    }\n\n    timeupdate(){\n       \n        this.setState({time:new Date().toLocaleString()})\n        \n       \n    }\n    render() {\n        return (\n            <div >\n               <h1> {this.state.time}</h1>\n                <button onClick={this.timestart}>start</button>\n            </div>\n        );\n    }\n}\n\nexport default datetime;","import React, { Component } from 'react';\n\nclass Toggle extends Component {\n    constructor(){\n        super();\n        this.state={\n            visible:false\n        }\n\n    }\n    togglepara=()=>{\n        this.setState({\n            visible:!this.state.visible\n        })\n    }\n    render() {\n        return (\n            <div>\n                <h1>toggle pragraph</h1>\n                <button onClick={this.togglepara}>\n                    {this.state.visible? \"hide\":\"show\"}\n                </button>\n                {this.state.visible &&<p>fff</p>}\n            </div>\n        );\n    }\n}\n\nexport default Toggle;","import React from \"react\";\n\n\n\nclass Input extends React.Component {\n  constructor(props) { \n    super(props);\n    this.state = { \n      value: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) { \n    this.setState({ value: event.target.value });\n    console.log(this.state.value);\n  }\n\n  render() { \n    return (\n      <div>\n        <input\n          name=\"firstName\"\n          type=\"text\"\n          value={this.state.value}\n          onChange={this.handleChange}\n        />\n        {this.state.value}\n      \n      </div>\n    );\n  }\n}\nexport default Input","import React, { Component } from 'react';\n\nclass Cyclelife extends Component {\n    constructor(){\n        console.log(\"inside constructor\");\n        super();\n        this.state={\n            value:0\n        }\n        this.update1=this.update1.bind(this);\n        this.update2=this.update2.bind(this);\n\n    }\n    update1(){\n        this.setState({\n            value:1\n        })\n    }\n\n    update2(){\n    alert(\"d\",this.value);     \n    }\n    componentWillMount(){\n        console.log(\"componentWillMount\");\n    }\n    componentDidMount(){\n        console.log(\"componentDidMount\");\n\n    }\n    componentDidUpdate(){\n        console.log(\"componentDidUpdate\");\n\n    }\n    componentWillUnmount(){\n        console.log(\"componentWillUnmount\");\n\n    }\n    componentDidCatch(){\n        console.log(\"componentDidCatch\");\n        \n    }\n    render() {\n        console.log(\"inside render\");\n        return (\n            <div>\n              \n           \n                <button onClick={this.update1}>click to change updateamount</button>\n                <button onClick={this.update2}>click to show updateunamount</button>\n            \n            </div>\n        );\n    }\n}\n\nexport default Cyclelife;","import React, { Component } from 'react';\n\nclass dEMO3 extends Component {\n    constructor(props){\n        super(props)\n    }\n    render() {\n        return (\n            <div>\n                <h1>fff</h1>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default dEMO3;","import React from 'react';\nimport logo from './logo.svg';\nimport  './App.css';\nimport Demo2 from \"./demo2\";\nimport Demo1 from \"./demo1\";\nimport Counter from \"./counter\";\nimport Datetime from \"./datetime\";\nimport Toggle from \"./toggle\";\nimport Input from \"./input\";\nimport Cyclelife from \"./cyclelife\";\nimport DEMO3 from \"./DEMO3\"\n\nfunction App() {\n  return (\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n        \n    //   </header>\n    //   {/* <Demo2 title=\"iti\" /> */}\n    //   {/* <Demo1  /> */}\n    // </div>\n    <div>\n      <Counter />\n      <Datetime />\n      <Toggle />\n      <Cyclelife />\n      <Input />\n     <DEMO3>vfff</DEMO3>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport { Link} from \"react-router-dom\";\n\nclass Home extends Component {\n  \n    render() {\n        \n        return (\n            <div>\n                <ul>\n                <li><Link to=\"/\">home</Link> </li>\n                <li><Link to=\"/demo1\">demo1</Link> </li>\n                    <li><Link to=\"/demo2\">dmo2</Link> </li>\n                   \n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport {Link} from \"react-router-dom\";\nclass error extends Component {\n    constructor(props){\n        super(props)\n    }\n    render() {\n        console.log(this.props);\n        return (\n            <div>\n                404\n               <Link to=\"/\" >home</Link>\n            </div>\n        );\n    }\n}\n\nexport default error;","import React, { Component } from 'react';\n\nclass Try extends Component {\n    render() {\n        console.log(this.props.match.params.id)\n        return (\n            <div>\n              <h1>  try id</h1>\n              <p>{this.props.match.params.id}</p>\n            </div>\n        );\n    }\n}\n\nexport default Try;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Home from \"./home\";\nimport Demo1 from \"./demo1\";\nimport Demo2 from \"./demo2\";\nimport Counter from \"./counter\";\nimport Error1 from \"./error\";\nimport Try1 from \"./try\";\n\nimport {BrowserRouter,Route,Switch} from \"react-router-dom\";\n\nimport * as serviceWorker from './serviceWorker';\n\n\n//=====================================\n\n// var temple=React.createElement(\"div\", {\n//     class: \"class1\"\n//   }, React.createElement(\"p\", null, \"hello iti\"));\n  \n//   ReactDOM.render(temple, document.getElementById('root'));\n\n//======================================\n// var x=1;\n// var jsx=(<div>\n//     <h1>{x}</h1>\n//     <h2>{x+1}</h2>\n//     <h3>{x>1?\"hello\":\"bye\"}</h3>\n//     </div>)\n//    ReactDOM.render(jsx, document.getElementById('root'));\n\nconst Routes=(\n  <BrowserRouter>\n  <Switch>\n    <Route path=\"/\" component={Home} exact />\n    <Route path=\"/demo1\" component={Demo1} />\n    <Route path=\"/demo2\" component={Demo2} />\n    <Route path=\"/counter\" component={Counter} />\n    <Route path=\"/try/:id\" component={Try1} />\n    <Route component={Error1} />\n</Switch>\n\n  </BrowserRouter>\n)\n\n\nReactDOM.render(Routes, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}